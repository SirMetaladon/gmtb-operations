@name OPS Score e2 - Lifetime Tally
@inputs MainEntityList:table
@persist CarData:table Scores:table Overall CurrentlyInteracting:table CurrInteractUNSAFE:table Atype Btype ExcludedEntities:table Recieved:table EntSeenThisScan:table OPSName:string SaveFile:array HID LastPlayerToInteract:table MainListKeys:array IdleFreeze CommandStack:table IncrementX Deleted Spawned Trains Print:array Names:table StartTime ScanInterval X
@outputs Miles Scores:table Spawned Deleted Trains Names:table TimeElapsed CommandStack:table CurrentlyInteracting:table ToFreeze:array LastPlayerToInteract:table 

@inputs Inc Signal:table
@persist Response
@outputs Response 
@trigger Inc

if(dupefinished()){reset()}


if(first()){
    
    findInSphere(entity():pos(),1024)
    findClipToClass("gmod_wire_expression2")
    local E2s = findToArray()
    
    for(X = 1,E2s:count()){
        
        if(E2s[X,entity]:getName():find("Operations")){
            
            OPSName = E2s[X,entity]:getName():sub(12)
            
        }
        
    }
    
    #v1.3  - started keeping track of versions 3-9-24
    #v1.4  - attempts to fix save name problems, implemented per-job tracking too
    
    Version = "v1.3"

    
    #[
    ideas for things to track:
    average time between remarking
    average time between end destinations
    average handoff time?
    cars delivered per hour (per player, per job)
    how long has a player been operating (first connected to a car to most recent car movement)
    
    ]#
    
    function flash(E:entity,V:vector){
        
        holoCreate(HID,E:pos(),vec(1.03),E:angles(),V,E:model())
        holoMaterial(HID, "debug/debugdrawflat")
        holoAlpha(HID,100)
        holoParent(HID,E)
        HID++
        
    }
    
    Scores["Total",table] = table()
    Names["Total",string] = "Total"
    
    Response = Inc
    
    IncrementX = 1
    
    ScanInterval = 3000
    
    IdleFreeze = 5 * 60
    
    runOnChat(1)
    
    function number safe(){ #Function that determines if the current iteration is out of processing time
        
        return minquota() > 3000
 
    }
    
    function string array:toString(Separator:string){
        
        local S = ""
        
        for(X = 1,This:count()){
            
            S = S + Separator + This[X,string]
            
        }
        
        return S
        
    }
    
    function number mask(S:string,N:number,T:table){
        
        if(T[S,number] >= N){
            
            return 0
            
        }else{
            
            T[S,number] = N
            return 1
            
        }
        
    }
    
    function string getJob(CarID:string){
        
        return MainEntityList[CarID,table]["route",array][MainEntityList[CarID,table]["step",number],string]:explode("|")[1,string]
        
        
    }
    
    timer("CommandStack",500)
    timer("checknames",200)
    timer("scan",1000)
    timer("recheck",1500)
    timer("freeze",10000)
    
    function array get_operators(S:string){
        
        #input = entity ID in string format
        
        local EntsInThisCut = table()
        
        #If you've already found this car in a previous scan, copy that data and end it
 
        if(EntSeenThisScan[S,number]){
            
            Btype++
            return CurrInteractUNSAFE[S,array]
            
            
        }else{
        
            local StringOfFoundOwners = "|"
            local ArrayOutput = array()
            local ConnectedEntities = entity(S:toNumber()):getConnectedEntities("rope","axis")
            
            Atype++
            
            for(X = 1,ConnectedEntities:count()){
                
                local OwnerSteamID = ConnectedEntities[X,entity]:owner():steamID()
                local EntID = ConnectedEntities[X,entity]:id():toString()
                
                if(!StringOfFoundOwners:find("|"+OwnerSteamID+"|") & !ExcludedEntities[EntID,number] & OwnerSteamID != ""){
                    
                    #flash(ConnectedEntities[X,entity],vec(255,0,0))
                    
                    StringOfFoundOwners = StringOfFoundOwners + OwnerSteamID+"|"
                    
                    local Insert = 1
                    while(ArrayOutput[Insert,string] > OwnerSteamID){
                        
                        Insert++
                        
                    }
                    
                    ArrayOutput:insertString(Insert,OwnerSteamID)
                    Scores[OwnerSteamID,table]["most recent interaction",number] = systime()
                    
                }
                
                EntsInThisCut[EntID,number] = 1
                EntSeenThisScan[EntID,number] = 1
                
            }
            
            local ListOfPrevSeenEntities = EntsInThisCut:keys()
            
            if(ArrayOutput:count()){
                
                for(X = 1,ListOfPrevSeenEntities:count()){
                    
                    LastPlayerToInteract[ListOfPrevSeenEntities[X,string],array] = ArrayOutput
                    CurrInteractUNSAFE[ListOfPrevSeenEntities[X,string],array] = ArrayOutput
                    
                }  
                
            }else{
                
                CurrInteractUNSAFE:remove(ListOfPrevSeenEntities[X,string])
                
            }
            
            return ArrayOutput
            
        }
        
        
    }
    
    function string mapname(){
        
        local Real = map()
        
        if(Real == "gm_sunsetgulch_rsg"){
            
            return "SSGRSG"
            
        }elseif(Real == "gm_sunsetgulch"){
            
            return "SSGPHX"
            
        }elseif(Real == "gm_wrefingley"){
            
            return "Wrefingley"
            
        }else{
            
            return Real:sub(3)
            
        }
        
    }
    
    
}


if(clk("CommandStack")){
    
    timer("CommandStack",100)
    
    local LocalTime = systime()
    
    if(CommandStack[1,table]["command",string] == "scan_1" & safe()){

        MainListKeys = MainEntityList:keys()

        CurrentlyInteracting = CurrInteractUNSAFE:clone()
        CurrInteractUNSAFE = table()
        
        EntSeenThisScan = table()
        
        ExcludedEntities = table()
        
        CommandStack = table(table("command" = "scan_2"))
        
        
        X = 1
        
    }
    
    if(CommandStack[1,table]["command",string] == "scan_2" & safe()){
    
        while(X <= MainListKeys:count() & safe()){
            
            local CarEntities = MainEntityList[MainListKeys[X,string],table]["ents",array]
            
            for(Y = 1,CarEntities:count()){
                
                ExcludedEntities[CarEntities[Y,number]:toString(),number] = 1
            
            }
            
            X++
            
        }
        
        if(X > MainListKeys:count()){
        
            CommandStack = table(table("command" = "scan_3"))
            X = 1
            
        }
        
    }
    
    if(CommandStack[1,table]["command",string] == "scan_3" & safe()){
    
        while(X <= Scores:keys():count() & safe()){
                
            PlayerSteamID = Scores:keys()[X,string]
            
            if(findPlayerBySteamID(PlayerSteamID):isValid() & (systime() - Scores[PlayerSteamID,table]["most recent interaction",number]) < 5*60){
            
                Scores[PlayerSteamID,table]["connected",number] = Scores[PlayerSteamID,table]["connected",number] + (ScanInterval/1000)
                
            }
            
            X++
            
        }
        
        if(X > Scores:keys():count()){
            
            CommandStack = table(table("command" = "scan_main"))
            X = 1
            
        }
        
    }

    if(CommandStack[1,table]["command",string] == "scan_main" & safe()){
 
        while(IncrementX <= MainListKeys:count() & safe()){
            
            local FrameID = MainListKeys[IncrementX,string]
            
            if(FrameID:toNumber() != 0 & MainEntityList[FrameID,table]["NotTracking",number] != 1){
                
                local Pos = entity(FrameID:toNumber()):pos()
                
                if(Pos != vec(0)){
                    
                    local ArrayOfPlayers = get_operators(FrameID)
                    local PlayerArrayID = ArrayOfPlayers:toString("|")
                    local Interaction = 0
                    
                    if(!CarData[FrameID,table]:count()){
                        
                        CarData[FrameID,table] = table("dist" = 0,"lastpos" = Pos,"interacted" = table())
                        
                    }elseif(PlayerArrayID != CarData[FrameID,table]["previous interaction",string]){
                        
                        Interaction = 1
                        
                    }
                    
                    local DistFromLastPos = Pos:distance(CarData[FrameID,table]["lastpos",vector])
                        
                    for(Y = 1,ArrayOfPlayers:count()){
                        
                        local Player = ArrayOfPlayers[Y,string]
                        
                        if(!Scores[Player,table]:count()){
                            
                            Scores[Player,table] = table("start time" = systime(),"scoretype" = "player")
                        }
                        
                        if(Interaction == 1 & CarData[FrameID,table]["interacted",table][Player,number] == 0){
                            
                            CarData[FrameID,table]["interacted",table][Player,number] = 1
                            CarData[FrameID,table]["interacts",number] = CarData[FrameID,table]["interacts",number] + 1
                            Scores[Player,table]["interacts",number] = Scores[Player,table]["interacts",number] + 1
                            Scores["Total",table]["interacts",number] = Scores["Total",table]["interacts",number] + 1

                            
                        }
                        
                        Scores[Player,table]["dist",number] = Scores[Player,table]["dist",number] + DistFromLastPos
                        Scores["Total",table]["dist",number] = Scores["Total",table]["dist",number] + DistFromLastPos
                        
                    }
                    
                    CarData[FrameID,table]["previous interaction",string] = PlayerArrayID
                    
                    if(ArrayOfPlayers:count()){CarData[FrameID,table]["last interacted time",number] = systime()}
                    
                    local LastInteract = CarData[FrameID,table]["last interacted time",number]
                    
                    if((LastInteract + 60) < LocalTime){
                        CarData[FrameID,table]["idle",number] = 1
                    }else{
                        CarData[FrameID,table]["idle",number] = 0
                    }

                    
                    Miles = Miles + (DistFromLastPos/(12*5280))
                    
                    CarData[FrameID,table]["dist",number] = CarData[FrameID,table]["dist",number] + DistFromLastPos
                    CarData[FrameID,table]["lastpos",vector] = Pos
                    
                    local CarJob = getJob(FrameID)
                    
                    if(!Scores[CarJob,table]:count()){
                        
                        Scores[CarJob,table] = table("first spawned" = systime(),"scoretype" = "job")
                    }
                    
                    Scores[CarJob,table]["uniquecount",number] = Scores[CarJob,table]["uniquecount",number] + (CarData[FrameID,table]["lastjob",string] != CarJob)
                    CarData[FrameID,table]["lastjob",string] = CarJob
                    Scores[CarJob,table]["runningcount",number] = Scores[CarJob,table]["runningcount",number] + 1
                    Scores[CarJob,table]["dist",number] = Scores[CarJob,table]["dist",number] + DistFromLastPos
                    
                }
                
            }
            
            IncrementX++
            
        }
        
        if(IncrementX > MainListKeys:count()){
            
            if(StartTime != 0){
                
                Scores["Total",table]["scans",number] = Scores["Total",table]["scans",number] + 1
                
            }
            
            IncrementX = 1
            CommandStack:remove(1)
            
        }
        
    }
    
    while(ToFreeze:count() & safe()){
        
        local FrameID = ToFreeze[1,string]
    
        local LastInteract = CarData[FrameID,table]["last interacted time",number]
                        
        if((LastInteract + IdleFreeze) < LocalTime){
        
            local Ents = MainEntityList[FrameID,table]["ents",array]
    
            for(Z = 1, Ents:count()){
                entity(Ents[Z,number]):propFreeze(1)
            }
            
        }
        
        ToFreeze:remove(1)
        
    }    
    
}

if(clk("scan")){
    
    CommandStack = table(table("command" = "scan_1"))
    timer("scan",ScanInterval)
    
}

if(clk("checknames")){
    
    local PL = players()
    
    for(X = 1,PL:count()){
    
        P = PL[X,entity]:name()+":"
        
        if(P != ":"){Names[PL[X,entity]:steamID(),string] = P}
        
    }
    
    timer("checknames",10000)
    
}

if(clk("freeze")){
    
    ToFreeze = MainEntityList:keys()
    
    timer("freeze",5*60*1000)
    
}

if(Inc != Response & !first() & clk("recheck")){
    
    if(Signal["name",string] == "reroute"){
            
        local ArrayOfPlayers = LastPlayerToInteract[Signal["ent",string],array]
            
        for(Y = 1,ArrayOfPlayers:count()){
            
            local Player = ArrayOfPlayers[Y,string]
            
            if(!Scores[Player,table]:count()){
                
                Scores[Player,table] = table("start time" = systime(),"scoretype" = "player")
            }
            
            local CarJob = getJob(Signal["ent",string])
                
            if(!Scores[CarJob,table]:count()){
                
                Scores[CarJob,table] = table("first spawned" = systime(),"scoretype" = "job")
            }
            
            if(Signal["isoffmap",number]){
                
                Scores[Player,table]["offmap",number] = Scores[Player,table]["offmap",number] + 1
                Scores["Total",table]["offmap",number] = Scores["Total",table]["offmap",number] + 1
                Scores[CarJob,table]["offmap",number] = Scores[CarJob,table]["offmap",number] + 1
                
            }elseif(Signal["count",number] == 1){
                
                Scores[Player,table]["final",number] = Scores[Player,table]["final",number] + 1
                Scores["Total",table]["final",number] = Scores["Total",table]["final",number] + 1
                Scores["Total",table]["final",number] = Scores["Total",table]["final",number] + 1
                
            }elseif(Signal["nomove",number] == 0){
                
                Scores[Player,table]["deliveries",number] = Scores[Player,table]["deliveries",number] + 1
                Scores["Total",table]["deliveries",number] = Scores["Total",table]["deliveries",number] + 1
                Scores["Total",table]["deliveries",number] = Scores["Total",table]["deliveries",number] + 1
                
            }
              
        }
        
    }elseif(Signal["name",string] == "deleted"){
        
        Deleted = Deleted + 1
        
        local ArrayOfPlayers = LastPlayerToInteract[Signal["ent",string],array]
            
        for(Y = 1,ArrayOfPlayers:count()){
            
            local Player = ArrayOfPlayers[Y,string]
            
            if(!Scores[Player,table]:count()){
                
                Scores[Player,table] = table()
            }
            
            Scores[Player,table]["deletions",number] = Scores[Player,table]["deletions",number] + 1
            Scores["Total",table]["deletions",number] = Scores["Total",table]["deletions",number] + 1
            
        }
        
    }elseif(Signal["name",string] == "spawn"){
        
        Spawned = Spawned + 1
        
    }elseif(Signal["name",string] == "train"){
        
        Trains = Trains + 1
        
        if(StartTime == 0){
            StartTime = systime()
            Scores["Total",table]["start time",number] = systime()
        }
        
    }
    
    #[
    }elseif(Signal["name",string] == "renew"){
        
        CarData[Signal["ent",string],table]["interacted",table] = table()
        
    }]#
    
    Response = Inc
    
    timer("recheck",150)
    
}elseif(clk("recheck")){
    
    timer("recheck",1500)
    
}
    

if(chatClk(owner())){
    
    if(lastSaid() == ".print"){
    
        hideChat(1)
    
        K = Scores:keys()
        Awards = table()
    
        TR = "Miles = "+Miles+"\n Spawned = "+Spawned+"\n Trains = "+Trains+"\n Deleted = "+Deleted+"\n Hours = "+round(TimeElapsed/(60*60),2)+"\n"
        for(X = 1,K:count()){
            R = K[X,string]
            
            TR = TR + R+"\n"+Names[R,string]+"\n"+Scores[R,table]:toString()
            
            if(Names[R,string] != "Total"){
            
                if(mask("HeavyHaulerScore",round(Scores[R,table]["dist",number]/(12*5280),1),Awards)){Awards["HeavyHaulerName",string] = Names[R,string]}
                if(mask("GetDoneScore",Scores[R,table]["deliveries",number],Awards)){Awards["GetDoneName",string] = Names[R,string]}
                if(mask("LocalServiceScore",Scores[R,table]["final",number]-Scores[R,table]["offmap",number],Awards)){Awards["LocalServiceName",string] = Names[R,string]}
                if(mask("LinkChainScore",Scores[R,table]["offmap",number],Awards)){Awards["LinkChainName",string] = Names[R,string]}
                if(mask("InteractsScore",Scores[R,table]["interacts",number],Awards)){Awards["InteractsName",string] = Names[R,string]}
                
            }
             
        }
        
        local Date = date()
        local RN = randint(100,999)
        
        local Name = OPSName != "" ? OPSName:replace(" ","-") : mapname()
        
        local FileName = (Date["year",number]+"-"+Date["month",number]+"-"+Date["day",number]+"-"+Name+"-"+owner():name()+"-"+RN):lower()
        
        Print:pushString("Wrote File \"e2shared/opsdata-"+FileName+".txt\"\n"+Spawned+" cars created, "+Trains+" trains spawned.\n"+round(TimeElapsed/(60*60),2)+" hour session, "+round(Miles)+" total car-miles")
        
        if(Awards["HeavyHaulerName",string] != ""){Print:pushString("\nHeavy Hauler: "+Awards["HeavyHaulerName",string]+" with "+Awards["HeavyHaulerScore",number]+" car-miles.")}
        if(Awards["GetDoneName",string] != ""){Print:pushString("\nGetting it Done: "+Awards["GetDoneName",string]+" moved "+Awards["GetDoneScore",number]+" cars to locations.")}
        if(Awards["LocalServiceName",string] != ""){Print:pushString("\nLocal Service: "+Awards["LocalServiceName",string]+" delivered "+Awards["LocalServiceScore",number]+" cars to customers.")}
        if(Awards["LinkChainName",string] != ""){Print:pushString("\nLink in the Chain: "+Awards["LinkChainName",string]+" delivered "+Awards["LinkChainScore",number]+" cars off-map.")}
        if(Awards["InteractsName",string] != ""){Print:pushString("\nSystem Keystone: "+Awards["InteractsName",string]+" handled "+Awards["InteractsScore",number]+" cars in transit.")}
        
        timer("print",500)
        
        SaveFile = array(">e2shared/opsdata-"+FileName+".txt",TR)
        
        timer("save",50)
        
    }elseif(lastSaid() == ".interacts"){
        
        hideChat(1)
        printTable(CarData[owner():aimEntity():id():toString(),table])
        
    }    
    
}

if(chatClk(owner()) & lastSaid() == ".ohboyherewego"){
    
    Response = 0
    
}

if(SaveFile:count() & clk("save")){
    
    if(fileCanWrite()){
    
        fileWrite(SaveFile[1,string],SaveFile[2,string])
        SaveFile:remove(1)
        SaveFile:remove(1)
        
    }else{
        
        timer("save",1000)
        
    }
    
}

if(clk("print")){
    
    if(playerCanPrint()){
    
        print(Print[1,string])
        Print:remove(1)
        
    }
    
    if(Print:count()){
        
        timer("print",250)
        
    }
    
    
}

if(StartTime != 0){

    TimeElapsed = systime() - StartTime
    
}
