@name GMTB_Operations/OPS Score Tracker v1.47
@inputs MainEntityList:table

@persist [CarData Scores CurrentlyInteracting CurrInteractUNSAFE LastPlayerToInteract Names CommandStack EntSeenThisScan ExcludedEntities]:table [SaveFile MainListKeys Print]:array ScanInterval HID IdleFreezeInterval PreviousScanTime ScanIncrement FreezingOn SessionID
@outputs Scores:table Names:table TimeElapsed CommandStack:table CurrentlyInteracting:table ToFreeze:array LastPlayerToInteract:table ScanIncrement FreezingOn

@inputs Inc Signal:table
@persist Response
@outputs Response 
@trigger Inc

if(dupefinished()){reset()}


if(first()){
    
    #v1.47 - autosaves save over themselves
    #v1.46 - autosaved session information, took a crack at fixing the connected bug
    #v1.45 - made check for blank tracking more descriptive, made cars check velocity before freezing, added a toggle for freezing
    #v1.44 - tried to work out delay with scans; system kept getting backed up, added check for blank with instantiate
    #v1.43 - fix bugs with how the system handles job and player score saving, added "instantiate" function
    #v1.42 - merge all data storage into the Scores table for easy saving, renamed the e2 to OPS Score Tracker
    #v1.4  - attempts to fix save name problems, implemented per-job tracking too
    #v1.3  - started keeping track of versions 3-9-24
    
    Version = "v1.47"
    
    ScanInterval = 3 #time in seconds that the E2 will shoot for; it isn't exact as some times there will be delays
    IdleFreezeInterval = 5 * 60
    FreezingOn = 1 #on by default, use .autofreeze to toggle
    
    function flash(E:entity,V:vector){
        
        holoCreate(HID,E:pos(),vec(1.03),E:angles(),V,E:model())
        holoMaterial(HID, "debug/debugdrawflat")
        holoAlpha(HID,100)
        holoParent(HID,E)
        HID++
        
    }
    
    function number safe(){ #Function that determines if the current iteration is out of processing time
        
        return minquota() > 3000
 
    }
    
    function string array:toString(Separator:string){
        
        local S = ""
        
        for(X = 1,This:count()){
            
            S = S + Separator + This[X,string]
            
        }
        
        return S
        
    }
    
    function number mask(S:string,N:number,T:table){
        
        if(T[S,number] >= N){
            
            return 0
            
        }else{
            
            T[S,number] = N
            return 1
            
        }
        
    }
    
    function string getJob(CarID:string){
        
        return MainEntityList[CarID,table]["route",array][MainEntityList[CarID,table]["step",number],string]:explode("|")[1,string]
        
    }
    
    function instantiate(Entry:string,Type:string,Descriptor:string){
        
        if(Entry == ""){
            
            print("Tracker error on "+Type+" "+Descriptor)
            
        }else{
        
            if(!Scores[Entry,table]:count()){
                
                Scores[Entry,table] = table("first" = systime(),"scoretype" = Type)
                
            }
            
        }
        
    }
    
    function array get_operators(S:string){
        
        #input = entity ID in string format
        
        local EntsInThisCut = table()
        
        #If you've already found this car in a previous scan, copy that data and end it
 
        if(EntSeenThisScan[S,number]){
            
            return CurrInteractUNSAFE[S,array]
            
            
        }else{
        
            local StringOfFoundOwners = "|"
            local ArrayOutput = array()
            local ConnectedEntities = entity(S:toNumber()):getConnectedEntities("rope","axis")
            
            for(X = 1,ConnectedEntities:count()){
                
                local OwnerSteamID = ConnectedEntities[X,entity]:owner():steamID()
                local EntID = ConnectedEntities[X,entity]:id():toString()
                
                if(!StringOfFoundOwners:find("|"+OwnerSteamID+"|") & !ExcludedEntities[EntID,number] & OwnerSteamID != ""){
                    
                    #flash(ConnectedEntities[X,entity],vec(255,0,0))
                    
                    StringOfFoundOwners = StringOfFoundOwners + OwnerSteamID+"|"
                    
                    local Insert = 1
                    while(ArrayOutput[Insert,string] > OwnerSteamID){
                        
                        Insert++
                        
                    }
                    
                    ArrayOutput:insertString(Insert,OwnerSteamID)
                    
                    instantiate(OwnerSteamID,"player","most recent interact")
                    Scores[OwnerSteamID,table]["most recent interaction",number] = systime()
                    
                }
                
                EntsInThisCut[EntID,number] = 1
                EntSeenThisScan[EntID,number] = 1
                
            }
            
            local ListOfPrevSeenEntities = EntsInThisCut:keys()
            
            if(ArrayOutput:count()){
                
                for(X = 1,ListOfPrevSeenEntities:count()){
                    
                    LastPlayerToInteract[ListOfPrevSeenEntities[X,string],array] = ArrayOutput
                    CurrInteractUNSAFE[ListOfPrevSeenEntities[X,string],array] = ArrayOutput
                    
                }  
                
            }else{
                
                for(X = 1,ListOfPrevSeenEntities:count()){
                
                    CurrInteractUNSAFE:remove(ListOfPrevSeenEntities[X,string])
                    
                }
                
            }
            
            return ArrayOutput
            
        }
        
        
    }
    
    function string mapname(){
        
        local Real = map()
        
        if(Real == "gm_sunsetgulch_rsg"){
            
            return "SSGRSG"
            
        }elseif(Real == "gm_sunsetgulch"){
            
            return "SSGPHX"
            
        }elseif(Real == "gm_wrefingley"){
            
            return "Wrefingley"
            
        }else{
            
            return Real:sub(3)
            
        }
        
    }
    
    function string toAlphaNumeric(StrIn:string){
        
        local CharArray = StrIn:explode("")
        local StrOut = ""
        
        for(X = 1,CharArray:count()){
            
            local Char = CharArray[X,string]
            
            local Byte = toByte(Char)
            
            if( 
            (Byte == 45) | #dash
            (Byte == 95) | #underscore
            (Byte >= 48 & Byte <= 57) | #0-9
            (Byte >= 65 & Byte <= 90) | #A-Z
            (Byte >= 97 & Byte <= 122)  #a-z
            ){
                StrOut = StrOut + Char
            }
            
        }
        
        return StrOut
        
    }
    
    timer("CommandStack",500)
    timer("checknames",200)
    timer("recheck",1500)
    timer("freeze",10000)
    timer("autosave",5*1000*60)
        
    Scores["Total",table] = table("scoretype" = "total")
    Scores["the wind",table] = table("scoretype" = "the wind")
    Names["Total",string] = "Total"
    
    Response = Inc
    
    SessionID = randint(100,999)
    
    runOnChat(1)
    
}


if(clk("CommandStack")){
    
    timer("CommandStack",100)
    
    local LocalTime = systime()
    
    if((CommandStack:count() == 0) & (LocalTime > (ScanInterval + PreviousScanTime))){
        
        CommandStack:pushTable(table("command" = "scan_1"))
        PreviousScanTime = LocalTime
            
    }
    
    if(CommandStack[1,table]["command",string] == "scan_1" & safe()){

        MainListKeys = MainEntityList:keys()

        CurrentlyInteracting = CurrInteractUNSAFE:clone()
        CurrInteractUNSAFE = table()
        
        EntSeenThisScan = table()
        
        CommandStack[1,table] = table("command" = "scan_2")
        
        EntSeenThisScan = table()
        ExcludedEntities = table()
        ScanIncrement = 1
        
    }
    
    if(CommandStack[1,table]["command",string] == "scan_2" & safe()){
    
        while(ScanIncrement <= MainListKeys:count() & safe()){
            
            local CarEntities = MainEntityList[MainListKeys[ScanIncrement,string],table]["ents",array]
            
            for(Y = 1,CarEntities:count()){
                
                ExcludedEntities[CarEntities[Y,number]:toString(),number] = 1
            
            }
            
            ScanIncrement = ScanIncrement + 1
            
        }
        
        if(ScanIncrement > MainListKeys:count()){
        
            CommandStack[1,table] = table("command" = "scan_3")
            ScanIncrement = 1
            
        }
        
    }
    
    if(CommandStack[1,table]["command",string] == "scan_3" & safe()){
    
        while(ScanIncrement <= Scores:keys():count() & safe()){
                
            PlayerSteamID = Scores:keys()[ScanIncrement,string]
            
            if(Scores[PlayerSteamID,table]["most recent interaction",number] != 0){
            #if(findPlayerBySteamID(PlayerSteamID):isValid()){
                
                instantiate(PlayerSteamID,"player","handoff")
                
                if((systime() - Scores[PlayerSteamID,table]["most recent interaction",number]) < 5*60){
                    
                    local CurrentTime = systime()
                    local AdditionalTime = CurrentTime - Scores[PlayerSteamID,table]["previously connect",number]

                    
                    if(Scores[PlayerSteamID,table]["previously connect",number] != 0){
                    
                        Scores[PlayerSteamID,table]["connected",number] = Scores[PlayerSteamID,table]["connected",number] + round(AdditionalTime,1)
                        
                    }
                    
                    Scores[PlayerSteamID,table]["previously connect",number] = CurrentTime
                    
                }else{
                    
                    Scores[PlayerSteamID,table]["previously connect",number] = 0
                    
                }
                
            }
            
            ScanIncrement = ScanIncrement + 1
            
        }
        
        if(ScanIncrement > Scores:keys():count()){
            
            CommandStack[1,table] = table("command" = "scan_main")
            ScanIncrement = 1
            
        }
        
    }

    if(CommandStack[1,table]["command",string] == "scan_main" & safe()){
 
        while(ScanIncrement <= MainListKeys:count() & safe()){
            
            local FrameID = MainListKeys[ScanIncrement,string]
            
            if(FrameID:toNumber() != 0 & MainEntityList[FrameID,table]["NotTracking",number] != 1){
                
                local Pos = entity(FrameID:toNumber()):pos()
                
                if(Pos != vec(0)){
                    
                    local ArrayOfPlayers = get_operators(FrameID)
                    local PlayerArrayID = ArrayOfPlayers:toString("|")
                    local Interaction = 0
                    
                    if(!CarData[FrameID,table]:count()){
                        
                        CarData[FrameID,table] = table("dist" = 0,"lastpos" = Pos,"interacted" = table())
                        
                    }elseif(PlayerArrayID != CarData[FrameID,table]["previous interaction",string]){
                        
                        Interaction = 1
                        
                    }
                    
                    local SpecificCarData = CarData[FrameID,table]
                    
                    local InteractsGiven = 0

                    local DistFromLastPos = Pos:distance(SpecificCarData["lastpos",vector])
                    
                    if(ArrayOfPlayers:count()){SpecificCarData["last interacted time",number] = systime()}
                        
                    for(Y = 1,ArrayOfPlayers:count()){
                        
                        local Player = ArrayOfPlayers[Y,string]
                        
                        instantiate(Player,"player","interacts")
                        
                        if(Interaction == 1 & SpecificCarData["interacted",table][Player,number] == 0){
                            
                            SpecificCarData["interacted",table][Player,number] = 1
                            SpecificCarData["interacts",number] = SpecificCarData["interacts",number] + 1
                            Scores[Player,table]["interacts",number] = Scores[Player,table]["interacts",number] + 1
                            Scores["Total",table]["interacts",number] = Scores["Total",table]["interacts",number] + 1
                            InteractsGiven++
                            
                        }
                        
                        Scores[Player,table]["dist",number] = Scores[Player,table]["dist",number] + DistFromLastPos
                        Scores["Total",table]["dist",number] = Scores["Total",table]["dist",number] + DistFromLastPos
                        
                    }
                    
                    if(!ArrayOfPlayers:count()){
                        
                        Scores["the wind",table]["dist",number] = Scores["the wind",table]["dist",number] + DistFromLastPos
                        Scores["Total",table]["dist",number] = Scores["Total",table]["dist",number] + DistFromLastPos
                        
                    }
                    
                    SpecificCarData["previous interaction",string] = PlayerArrayID
                    
                    local LastInteract = SpecificCarData["last interacted time",number]
                    
                    if((LastInteract + 60) < LocalTime){
                        SpecificCarData["idle",number] = 1
                    }else{
                        SpecificCarData["idle",number] = 0
                    }

                    
                    Scores["Total",table]["miles",number] = Scores["Total",table]["miles",number] + (DistFromLastPos/(12*5280))
                    
                    SpecificCarData["dist",number] = SpecificCarData["dist",number] + DistFromLastPos
                    SpecificCarData["lastpos",vector] = Pos
                    
                    local CarJob = getJob(FrameID)
                    instantiate(CarJob,"job","main")
                    
                    SpecificJobData = Scores[CarJob,table]
                    
                    SpecificJobData["uniquecount",number] = SpecificJobData["uniquecount",number] + (SpecificCarData["lastjob",string] != CarJob)
                    SpecificCarData["lastjob",string] = CarJob
                    SpecificJobData["runningcount",number] = SpecificJobData["runningcount",number] + 1
                    if(Interaction){SpecificJobData["interacts",number] = SpecificJobData["interacts",number] + InteractsGiven}
                    SpecificJobData["dist",number] = SpecificJobData["dist",number] + DistFromLastPos
                    
                }
                
            }
            
            ScanIncrement = ScanIncrement + 1
            
        }
        
        if(ScanIncrement > MainListKeys:count()){
            
            if(Scores["Total",table]["first",number] != 0){
                
                Scores["Total",table]["scans",number] = Scores["Total",table]["scans",number] + 1
                
            }
            
            CommandStack:remove(1)
            
        }
        
    }
    
    if(CommandStack[1,table]["command",string] == "print" & safe()){
        
        local Autosave = (CommandStack[1,table]["automatic",number] == 1)
        
        if(CommandStack[1,table]["phase",string] == "begin"){
            
            CommandStack[1,table]["NamesToAward",array] = Scores:keys()
            CommandStack[1,table]["Awards",table] = table()
            CommandStack[1,table]["phase",string] = "loop over names"
            CommandStack[1,table]["SaveString",string] = "Miles = "+Scores["Total",table]["miles",number]+"\n Spawned = "+Scores["Total",table]["spawned",number]+"\n Trains = "+Scores["Total",table]["trains",number]+"\n Deleted = "+Scores["Total",table]["deletions",number]+"\n Hours = "+round(TimeElapsed/(60*60),2)+"\n"

        }
        
        if(CommandStack[1,table]["phase",string] == "loop over names"){
        
            while(CommandStack[1,table]["NamesToAward",array]:count() & safe()){
            
                local R = CommandStack[1,table]["NamesToAward",array][1,string]
                
                CommandStack[1,table]["SaveString",string] = CommandStack[1,table]["SaveString",string] + R+"\n"+Names[R,string]+"\n"+Scores[R,table]:toString()
                
                if(Names[R,string] != "Total"){
                
                    if(mask("HeavyHaulerScore",round(Scores[R,table]["dist",number]/(12*5280),1),CommandStack[1,table]["Awards",table])){CommandStack[1,table]["Awards",table]["HeavyHaulerName",string] = Names[R,string]}
                    if(mask("GetDoneScore",Scores[R,table]["deliveries",number],CommandStack[1,table]["Awards",table])){CommandStack[1,table]["Awards",table]["GetDoneName",string] = Names[R,string]}
                    if(mask("LocalServiceScore",Scores[R,table]["final",number]-Scores[R,table]["offmap",number],CommandStack[1,table]["Awards",table])){CommandStack[1,table]["Awards",table]["LocalServiceName",string] = Names[R,string]}
                    if(mask("LinkChainScore",Scores[R,table]["offmap",number],CommandStack[1,table]["Awards",table])){CommandStack[1,table]["Awards",table]["LinkChainName",string] = Names[R,string]}
                    if(mask("InteractsScore",Scores[R,table]["interacts",number],CommandStack[1,table]["Awards",table])){CommandStack[1,table]["Awards",table]["InteractsName",string] = Names[R,string]}
                    
                }
                
                CommandStack[1,table]["NamesToAward",array]:remove(1)
                 
            }
            
            if(!CommandStack[1,table]["NamesToAward",array]:count() & minquota() > 5000){
                
                findInSphere(entity():pos(),1024)
                findClipToClass("gmod_wire_expression2")
                CommandStack[1,table]["E2sToFind",array] = findToArray()
                CommandStack[1,table]["OPSName",string] = "none"
                CommandStack[1,table]["phase",string] = "loop over e2s"
                
            }
            
        }
        
        if(CommandStack[1,table]["phase",string] == "loop over e2s" & safe()){
            
            while(CommandStack[1,table]["E2sToFind",array]:count() & safe()){
                
                if(CommandStack[1,table]["E2sToFind",array][1,entity]:getName():find("Operations")){
                
                    OPSName = CommandStack[1,table]["E2sToFind",array][1,entity]:getName():sub(12)
                    CommandStack[1,table]["E2sToFind",array] = array("1")
                    break
                    
                }
            
                CommandStack[1,table]["E2sToFind",array]:remove(1)
                
            }
            
            if(!CommandStack[1,table]["loop over e2s",array]:count()){
        
                local Date = date()
                
                local Name = toAlphaNumeric((OPSName != "" ? OPSName:replace(" ","-") : mapname())+"-"+owner():name())
                if(lastSaid() == ".print2"){Name = "printfix"}
                
                local FileName = (Date["year",number]+"-"+Date["month",number]+"-"+Date["day",number]+"-"+Name+"-"+randint(100,999)):lower()
                
                if(Autosave){FileName = (Date["year",number]+"-"+Date["month",number]+"-"+Date["day",number]+"-"+Name+"-autosave-"+SessionID):lower()}
                
                if(!Autosave){
                    Print:pushString("Wrote File \"e2shared/opsdata-"+FileName+".txt\"\n"+owner():name()+" - "+Date["month",number]+"/"+Date["day",number]+"/"+Date["year",number]+"\n\n"+Scores["Total",table]["spawned",number]+" cars created, "+Scores["Total",table]["trains",number]+" trains spawned.\n"+round(TimeElapsed/(60*60),2)+" hour session, "+round(Scores["Total",table]["miles",number])+" total car-miles")
                
                    if(CommandStack[1,table]["Awards",table]["HeavyHaulerName",string] != ""){Print:pushString("\nHeavy Hauler: "+CommandStack[1,table]["Awards",table]["HeavyHaulerName",string]+" with "+CommandStack[1,table]["Awards",table]["HeavyHaulerScore",number]+" car-miles.")}
                    if(CommandStack[1,table]["Awards",table]["GetDoneName",string] != ""){Print:pushString("\nGetting it Done: "+CommandStack[1,table]["Awards",table]["GetDoneName",string]+" moved "+CommandStack[1,table]["Awards",table]["GetDoneScore",number]+" cars to locations.")}
                    if(CommandStack[1,table]["Awards",table]["LocalServiceName",string] != ""){Print:pushString("\nLocal Service: "+CommandStack[1,table]["Awards",table]["LocalServiceName",string]+" delivered "+CommandStack[1,table]["Awards",table]["LocalServiceScore",number]+" cars to customers.")}
                    if(CommandStack[1,table]["Awards",table]["LinkChainName",string] != ""){Print:pushString("\nLink in the Chain: "+CommandStack[1,table]["Awards",table]["LinkChainName",string]+" delivered "+CommandStack[1,table]["Awards",table]["LinkChainScore",number]+" cars off-map.")}
                    if(CommandStack[1,table]["Awards",table]["InteractsName",string] != ""){Print:pushString("\nSystem Keystone: "+CommandStack[1,table]["Awards",table]["InteractsName",string]+" handled "+CommandStack[1,table]["Awards",table]["InteractsScore",number]+" cars in transit.")}
                    
                }
                
                timer("print",500)
                
                stoptimer("autosave")
                timer("autosave",30*60*1000) #30 mins
                
                SaveFile = array(">e2shared/opsdata-"+FileName+".txt",CommandStack[1,table]["SaveString",string])
                
                timer("save",50)
                
                CommandStack:remove(1)
                
            }
            
        }
        
        
        
    }
    
    while(ToFreeze:count() & safe()){
        
        local FrameID = ToFreeze[1,string]
    
        local LastInteract = CarData[FrameID,table]["last interacted time",number]
                        
        if((LastInteract + IdleFreezeInterval) < LocalTime){
        
            local Ents = MainEntityList[FrameID,table]["ents",array]
            
            if(Ents[1,entity]:vel():length() < 10){ #if the car is moving slower than about 0.6 mph
    
                for(Z = 1, Ents:count()){
                    entity(Ents[Z,number]):propFreeze(1)
                }
                
            }
            
        }
        
        ToFreeze:remove(1)
        
    }    
    
}

if(clk("checknames")){
    
    local PL = players()
    
    for(X = 1,PL:count()){
    
        P = PL[X,entity]:name()+":"
        
        if(P != ":"){Names[PL[X,entity]:steamID(),string] = P}
        
    }
    
    timer("checknames",10000)
    
}

if(clk("freeze")){
    
    if(FreezingOn){
        ToFreeze = MainEntityList:keys()   
    }
    
    timer("freeze",5*60*1000)
    
}

if(Inc != Response & !first() & clk("recheck")){
    
    if(Signal["name",string] == "reroute"){
            
        local ArrayOfPlayers = LastPlayerToInteract[Signal["ent",string],array]
        
        if(!ArrayOfPlayers:count()){ArrayOfPlayers = array("the wind")}
            
        for(Y = 1,ArrayOfPlayers:count()){
            
            local Player = ArrayOfPlayers[Y,string]
            
            instantiate(Player,"player","incrementor")
            
            if(Signal["isoffmap",number]){
                
                Scores[Player,table]["offmap",number] = Scores[Player,table]["offmap",number] + 1
                Scores["Total",table]["offmap",number] = Scores["Total",table]["offmap",number] + 1
                
            }elseif(Signal["count",number] == 1){
                
                Scores[Player,table]["final",number] = Scores[Player,table]["final",number] + 1
                Scores["Total",table]["final",number] = Scores["Total",table]["final",number] + 1
                
            }elseif(Signal["nomove",number] == 0){
                
                Scores[Player,table]["deliveries",number] = Scores[Player,table]["deliveries",number] + 1
                Scores["Total",table]["deliveries",number] = Scores["Total",table]["deliveries",number] + 1
                
            }
              
        }
        
        instantiate(Signal["job",string],"job","incrementor")
                
        if(Signal["isoffmap",number]){
            Scores[Signal["job",string],table]["offmap",number] = Scores[Signal["job",string],table]["offmap",number] + 1
            
        }elseif(Signal["count",number] == 1){
            
            Scores[Signal["job",string],table]["final",number] = Scores[Signal["job",string],table]["final",number] + 1
            
        }elseif(Signal["nomove",number] == 0){
            
            Scores[Signal["job",string],table]["deliveries",number] = Scores[Signal["job",string],table]["deliveries",number] + 1
            
        }
          
    }elseif(Signal["name",string] == "deleted"){
        
        Scores["Total",table]["deletions",number] = Scores["Total",table]["deletions",number] + 1
        
        local ArrayOfPlayers = LastPlayerToInteract[Signal["ent",string],array]
        if(!ArrayOfPlayers:count()){ArrayOfPlayers = array("the wind")}
            
        for(Y = 1,ArrayOfPlayers:count()){
            
            local Player = ArrayOfPlayers[Y,string]
            
            instantiate(Player,"player","deletions")
            
            Scores[Player,table]["deletions",number] = Scores[Player,table]["deletions",number] + 1
            
        }
        
        instantiate(Signal["job",string],"job","deletions")
        
        Scores[Signal["job",string],table]["deletions",number] = Scores[Signal["job",string],table]["deletions",number] + 1
        
    }elseif(Signal["name",string] == "spawn"){
        
        Scores["Total",table]["spawned",number] = Scores["Total",table]["spawned",number] + 1
        
    }elseif(Signal["name",string] == "train"){
        
        Scores["Total",table]["trains",number] = Scores["Total",table]["trains",number] + 1
        
        if(Scores["Total",table]["first",number] == 0){
            Scores["Total",table]["first",number] = systime()
        }
        
    }
    
    #[ #commented out temporarily as it was causing problems
    }elseif(Signal["name",string] == "renew"){
        
        CarData[Signal["ent",string],table]["interacted",table] = table()
        
    }]#
    
    Response = Inc
    
    timer("recheck",150)
    
}elseif(clk("recheck")){
    
    timer("recheck",1500)
    
}
    

if(chatClk(owner())){
    
    local LSC = lastSaid():explode(" ")
    
    if(lastSaid() == ".print" | lastSaid() == ".print2"){
    
        hideChat(1)
        
        CommandStack:pushTable(table("command" = "print","phase" = "begin"))
        
    }elseif(lastSaid() == ".interacts"){
        
        hideChat(1)
        printTable(CarData[owner():aimEntity():id():toString(),table])
        
    }elseif(lastSaid() == ".autofreeze"){
        
        hideChat(1)
        stoptimer("freeze")
        timer("freeze",1000)
        
        FreezingOn = !FreezingOn
        
        print("Autofreeze status is currently "+FreezingOn+". Use the command again to toggle.")
        
    }elseif(LSC[1,string] == ".score"){
        
        hideChat(1)
        
         if(LSC[2,string] != "" & Scores[LSC[2,string],table]:count() != 0){
        
        
            printTable(Scores[LSC[2,string],table])
            
        }else{
            
            print(LSC[2,string]+" not found!")
            
        }
        
    }    
    
}

if(chatClk(owner()) & lastSaid() == ".ohboyherewego"){
    
    Response = 0
    
}

if(SaveFile:count() & clk("save")){
    
    if(fileCanWrite()){
    
        fileWrite(SaveFile[1,string],SaveFile[2,string])
        SaveFile:remove(1)
        SaveFile:remove(1)
        
    }else{
        
        timer("save",1000)
        
    }
    
}

if(clk("print")){
    
    if(playerCanPrint()){
    
        print(Print[1,string])
        Print:remove(1)
        
    }
    
    if(Print:count()){
        
        timer("print",250)
        
    }
    
    
}

if(clk("autosave")){
    
    if(Scores["Total",table]["first",number] != 0){
        CommandStack:pushTable(table("command" = "print","phase" = "begin","automatic" = 1))
    }
    
    timer("autosave",30*60*1000)
    
}

if(Scores["Total",table]["first",number] != 0){

    TimeElapsed = systime() - Scores["Total",table]["first",number]
    
}
